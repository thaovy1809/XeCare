"use client"

import { useState, useEffect } from "react"
import { DashboardLayout } from "@/components/dashboard-layout"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Phone, MapPin, Clock, AlertTriangle, Car, Bike, Truck, Navigation, CheckCircle, User, Zap } from "lucide-react"

// Mock emergency services
const emergencyServices = [
  {
    id: 1,
    name: "C·ª©u h·ªô 24/7 Express",
    phone: "1900 1234",
    rating: 4.9,
    responseTime: "15-20 ph√∫t",
    coverage: "To√†n TP.HCM",
    services: ["K√©o xe", "S·ª≠a l·ªëp", "N·ªï m√°y", "C·∫•p c·ª©u"],
    available: true,
  },
  {
    id: 2,
    name: "SOS Auto Rescue",
    phone: "1900 5678",
    rating: 4.7,
    responseTime: "20-30 ph√∫t",
    coverage: "TP.HCM & B√¨nh D∆∞∆°ng",
    services: ["K√©o xe", "S·ª≠a ch·ªØa t·∫°i ch·ªó", "C·∫•p c·ª©u"],
    available: true,
  },
  {
    id: 3,
    name: "Fast Rescue Team",
    phone: "1900 9999",
    rating: 4.8,
    responseTime: "10-25 ph√∫t",
    coverage: "N·ªôi th√†nh TP.HCM",
    services: ["K√©o xe", "Thay l·ªëp", "N·ªï m√°y", "C·∫•p xƒÉng"],
    available: false,
  },
]

export default function EmergencyPage() {
  const [location, setLocation] = useState("")
  const [userLocation, setUserLocation] = useState<{ lat: number; lng: number } | null>(null)
  const [vehicleType, setVehicleType] = useState("")
  const [problemType, setProblemType] = useState("")
  const [description, setDescription] = useState("")
  const [contactInfo, setContactInfo] = useState({
    name: "",
    phone: "",
  })
  const [isRequestingHelp, setIsRequestingHelp] = useState(false)
  const [helpRequested, setHelpRequested] = useState(false)
  const [selectedService, setSelectedService] = useState<any>(null)

  // Get user location
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          })
          setLocation("V·ªã tr√≠ hi·ªán t·∫°i")
        },
        (error) => {
          console.log("Error getting location:", error)
        },
      )
    }
  }, [])

  const handleEmergencyCall = (service: any) => {
    window.open(`tel:${service.phone}`)
  }

  const handleRequestHelp = async (service: any) => {
    setSelectedService(service)
    setIsRequestingHelp(true)

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000))
      setHelpRequested(true)
    } catch (error) {
      console.error("Request failed:", error)
    } finally {
      setIsRequestingHelp(false)
    }
  }

  const problemTypes = [
    { value: "breakdown", label: "Xe ch·∫øt m√°y", icon: "‚ö°" },
    { value: "flat-tire", label: "Th·ªßng l·ªëp", icon: "üõû" },
    { value: "accident", label: "Tai n·∫°n", icon: "üí•" },
    { value: "out-of-fuel", label: "H·∫øt xƒÉng", icon: "‚õΩ" },
    { value: "battery", label: "H·∫øt pin", icon: "üîã" },
    { value: "overheating", label: "Qu√° nhi·ªát", icon: "üå°Ô∏è" },
    { value: "locked-out", label: "Kh√≥a trong xe", icon: "üîê" },
    { value: "other", label: "Kh√°c", icon: "‚ùì" },
  ]

  if (helpRequested) {
    return (
      <DashboardLayout
        allowedRoles={["user", "admin", "garage"]}
        title="C·ª©u h·ªô ƒëang ƒë·∫øn"
        description="ƒê·ªôi c·ª©u h·ªô ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n"
      >
        <Card className="border-green-100 bg-green-50">
          <CardContent className="p-8 text-center">
            <CheckCircle className="h-16 w-16 text-green-600 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-green-800 mb-2">C·ª©u h·ªô ƒëang tr√™n ƒë∆∞·ªùng!</h2>
            <p className="text-green-700 mb-6">
              {selectedService?.name} ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu v√† ƒëang di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ c·ªßa b·∫°n.
            </p>

            <div className="bg-white rounded-lg p-6 mb-6 text-left">
              <h3 className="font-semibold mb-4 text-center">Th√¥ng tin c·ª©u h·ªô</h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-slate-600">ƒê·ªôi c·ª©u h·ªô:</span>
                  <span className="font-medium">{selectedService?.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">Th·ªùi gian d·ª± ki·∫øn:</span>
                  <span className="font-medium text-orange-600">{selectedService?.responseTime}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">Hotline:</span>
                  <span className="font-medium text-blue-600">{selectedService?.phone}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">V·ªã tr√≠:</span>
                  <span className="font-medium">{location}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">V·∫•n ƒë·ªÅ:</span>
                  <span className="font-medium">{problemTypes.find((p) => p.value === problemType)?.label}</span>
                </div>
              </div>
            </div>

            <Alert className="mb-6">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                Vui l√≤ng ·ªü l·∫°i v·ªã tr√≠ an to√†n v√† gi·ªØ m√°y li√™n l·∫°c. ƒê·ªôi c·ª©u h·ªô s·∫Ω g·ªçi cho b·∫°n khi ƒë·∫øn g·∫ßn.
              </AlertDescription>
            </Alert>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                className="bg-blue-600 hover:bg-blue-700"
                onClick={() => window.open(`tel:${selectedService?.phone}`)}
              >
                <Phone className="h-4 w-4 mr-2" />
                G·ªçi ƒë·ªôi c·ª©u h·ªô
              </Button>
              <Button variant="outline" onClick={() => setHelpRequested(false)}>
                H·ªßy y√™u c·∫ßu
              </Button>
            </div>
          </CardContent>
        </Card>
      </DashboardLayout>
    )
  }

  return (
    <DashboardLayout
      allowedRoles={["user", "admin", "garage"]}
      title="C·ª©u h·ªô kh·∫©n c·∫•p 24/7"
      description="H·ªó tr·ª£ c·ª©u h·ªô xe nhanh ch√≥ng khi g·∫∑p s·ª± c·ªë"
    >
      <div className="grid lg:grid-cols-3 gap-8">
        {/* Emergency Form */}
        <div className="lg:col-span-2 space-y-6">
          {/* Quick Emergency Call */}
          <Card className="border-red-100 bg-red-50">
            <CardContent className="p-6">
              <div className="flex items-center space-x-4">
                <div className="bg-red-600 p-3 rounded-full">
                  <Phone className="h-6 w-6 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-red-800">Kh·∫©n c·∫•p? G·ªçi ngay!</h3>
                  <p className="text-red-700 text-sm">Hotline c·ª©u h·ªô 24/7 to√†n qu·ªëc</p>
                </div>
                <Button size="lg" className="bg-red-600 hover:bg-red-700" onClick={() => window.open("tel:1900123456")}>
                  <Phone className="h-5 w-5 mr-2" />
                  1900 123 456
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Location */}
          <Card className="border-blue-100">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <MapPin className="h-5 w-5 text-blue-600" />
                <span>V·ªã tr√≠ c·ªßa b·∫°n</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label>ƒê·ªãa ch·ªâ hi·ªán t·∫°i</Label>
                <div className="flex space-x-2">
                  <Input
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt..."
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                    className="flex-1"
                  />
                  <Button
                    variant="outline"
                    onClick={() => {
                      if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition((position) => {
                          setUserLocation({
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                          })
                          setLocation("V·ªã tr√≠ hi·ªán t·∫°i")
                        })
                      }
                    }}
                  >
                    <Navigation className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              {userLocation && (
                <Alert>
                  <AlertDescription>ƒê√£ x√°c ƒë·ªãnh v·ªã tr√≠ GPS c·ªßa b·∫°n. ƒê·ªôi c·ª©u h·ªô s·∫Ω t√¨m ƒë·∫øn ch√≠nh x√°c.</AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Vehicle & Problem */}
          <Card className="border-blue-100">
            <CardHeader>
              <CardTitle>Th√¥ng tin s·ª± c·ªë</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Lo·∫°i xe</Label>
                  <Select value={vehicleType} onValueChange={setVehicleType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn lo·∫°i xe" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="xe-may">
                        <div className="flex items-center space-x-2">
                          <Bike className="h-4 w-4" />
                          <span>Xe m√°y</span>
                        </div>
                      </SelectItem>
                      <SelectItem value="o-to">
                        <div className="flex items-center space-x-2">
                          <Car className="h-4 w-4" />
                          <span>√î t√¥</span>
                        </div>
                      </SelectItem>
                      <SelectItem value="xe-tai">
                        <div className="flex items-center space-x-2">
                          <Truck className="h-4 w-4" />
                          <span>Xe t·∫£i</span>
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Lo·∫°i s·ª± c·ªë</Label>
                  <Select value={problemType} onValueChange={setProblemType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Ch·ªçn v·∫•n ƒë·ªÅ" />
                    </SelectTrigger>
                    <SelectContent>
                      {problemTypes.map((problem) => (
                        <SelectItem key={problem.value} value={problem.value}>
                          <span>
                            {problem.icon} {problem.label}
                          </span>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label>M√¥ t·∫£ chi ti·∫øt</Label>
                <Textarea
                  placeholder="M√¥ t·∫£ t√¨nh tr·∫°ng xe, v·ªã tr√≠ c·ª• th·ªÉ, m·ª©c ƒë·ªô kh·∫©n c·∫•p..."
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  className="min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* Contact Info */}
          <Card className="border-blue-100">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <User className="h-5 w-5 text-blue-600" />
                <span>Th√¥ng tin li√™n h·ªá</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>H·ªç v√† t√™n</Label>
                  <Input
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    value={contactInfo.name}
                    onChange={(e) => setContactInfo((prev) => ({ ...prev, name: e.target.value }))}
                  />
                </div>
                <div className="space-y-2">
                  <Label>S·ªë ƒëi·ªán tho·∫°i</Label>
                  <Input
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={contactInfo.phone}
                    onChange={(e) => setContactInfo((prev) => ({ ...prev, phone: e.target.value }))}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Emergency Services */}
        <div className="lg:col-span-1">
          <Card className="border-blue-100 sticky top-4">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Zap className="h-5 w-5 text-blue-600" />
                <span>ƒê·ªôi c·ª©u h·ªô</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {emergencyServices.map((service) => (
                <div key={service.id} className="border rounded-lg p-4 space-y-3">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-semibold">{service.name}</h4>
                      <div className="flex items-center space-x-1 text-sm">
                        <span className="text-yellow-500">‚òÖ</span>
                        <span>{service.rating}</span>
                      </div>
                    </div>
                    <Badge variant={service.available ? "default" : "secondary"}>
                      {service.available ? "S·∫µn s√†ng" : "B·∫≠n"}
                    </Badge>
                  </div>

                  <div className="space-y-1 text-sm text-slate-600">
                    <div className="flex items-center space-x-2">
                      <Clock className="h-3 w-3" />
                      <span>{service.responseTime}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <MapPin className="h-3 w-3" />
                      <span>{service.coverage}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Phone className="h-3 w-3" />
                      <span>{service.phone}</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-1">
                    {service.services.map((s) => (
                      <Badge key={s} variant="outline" className="text-xs">
                        {s}
                      </Badge>
                    ))}
                  </div>

                  <div className="flex space-x-2">
                    <Button
                      size="sm"
                      variant="outline"
                      className="flex-1"
                      onClick={() => handleEmergencyCall(service)}
                      disabled={!service.available}
                    >
                      <Phone className="h-4 w-4 mr-1" />
                      G·ªçi ngay
                    </Button>
                    <Button
                      size="sm"
                      className="flex-1 bg-gradient-to-r from-blue-600 to-cyan-600"
                      onClick={() => handleRequestHelp(service)}
                      disabled={!service.available || isRequestingHelp || !location || !vehicleType || !problemType}
                    >
                      {isRequestingHelp ? (
                        <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin" />
                      ) : (
                        "Y√™u c·∫ßu"
                      )}
                    </Button>
                  </div>
                </div>
              ))}

              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription className="text-sm">
                  Trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p, h√£y g·ªçi tr·ª±c ti·∫øp hotline ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </div>
      </div>
    </DashboardLayout>
  )
}
